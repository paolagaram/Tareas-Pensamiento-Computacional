# -*- coding: utf-8 -*-
"""Tarea 4: Programas que utilizan listas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r6G4SYvKqBbcGx_27KAgzPJ3HGkM2YVp

1) Analizador de una lista entera (todo-en-uno de una sola lista)
"""

#Leer un entero n mayor que 0
while True:
  n=int(input("Introduce un número entero n(>0):")) #Guarda la cantidad de elementos de la lista que se permitirán insertar
  if n > 0:
    break #Deja de preguntar cuando sea un número positivo
#Capturar n enteros
lista =[]
for i in range(n): #Itera sobre un rango, el elemento n:la long de la lista. Rango(elemento inicial, elemento final: el único obligatorio, incremento)
  num = int(input(f"introduce el entero {i+1}: ")) #Empieza desde cero y continúa. Se guarda en la variable el elemento cero. F es formato de cadena, manda a llamar la variable dentro de las llaves
  lista.append(num)#Agrega a la lista el valor de num (el parametro) hasta el final

#Mostrar con índice creciente
for i in range (n):
  print(f"lista[{i}] = {lista[i]}") #{i} imprime la posición (índice de forma creciente) {}, i de [] recupera los valores de la lista.

#Mostrar con índices negativos en orden inverso
for k in range (1, n+1): #Elemento inicial y n+1 es el valor final, y asegura que llegue al final de la lista ya que en range si pones un numero te muestra uno antes
  print(f"lista-[{k}] = {lista[-k]} ") #-k empieza de atrás para adelante y termina hasta que se acabe la lista

#Mostrar la lista completa
print(lista)

#Calcular y mostrar el promedio
promedio = sum(lista) / n #Variable que guarda el resultado de sumar los elementos de la lista y dividirlo entre la longitud de la lista
print(f"El promedio es", promedio)

#Contar pares e impares
pares = sum(1 for x in lista if x %2==0) #comprension (genera memoria) de listas en la variable pares = sumatoria de . For para que itere sobre toda la lista, el 1 suma una posición si el escenario se cumple y lo cuenta (va de 1 en 1)
impares = n - pares #cantidad de elementos - el núm de pares, obtengo los impares
print(f"Pares={pares}")
print(f"Impares={impares}")

#Lista al cuadrado
cuadrados = [x**2 for x in lista] #Crea una lista de otra lista, cada elemento se eleva a la segunda potencia
print("Cuadrados:")
print(cuadrados)

#Construir y mostrar la sublista de pares
pares_lista = [x for x in lista if x%2==0] #Corchetes = lista, si el residuo es 0 se copia el valor y se agrega a la lista
print("Pares") # Corrected: used parentheses instead of square brackets
print(pares_lista)

#Construir y mostras la sublista de impares
impares_lista = [x for x in lista if x%2!=0] #Corchetes = lista, si el residuo es 0 se copia el valor y se agrega a la lista
print("Impares")
print(impares_lista)

#Mostrar los valores menores que su siguiente
print("Menores que el siguiente:")
for i in range (n-1):
  if lista[i] < lista[i+1]:
    print(lista[i])

"""2) Dúo de listas: suma por posición, ordenación y sin duplicados"""

#Leer un entero m mayor que 0
while True:
  m= int(input("Introduce un número entero m(>0):"))
  if m>0:
    break #Se rompe el bucle cuando se ingresa un número entero positivo

#Capturar m enteros para L1
L1=[] #lista vacía
for i in range(m): #Recorre la lista m veces
  num=int(input(f"introduce el entero {i+1} para L1:"))
  L1.append(num)
#Capturar m enteros para L2
L2=[]
for i in range(m):
  num=int(input(f"introduce el entero {i+1} para L2:"))
  L2.append(num)

#Generar Lsuma
LSUMA = [L1[i]+L2[i] for i in range (m)] #Toma los valores de las dos listas
#Crear L ORDENADA
LORDENADA = sorted(L1+L2) #Ordena de forma ascendente

#Crear LUNICA eliminando duplicados de LORDENADA preservando el orden de aparición
LUNICA=[]
for num in LORDENADA:
  if num not in LUNICA:
    LUNICA.append(num)

#Mostrar las listas
print(f"L1={L1}")
print(f"L2={L2}")
print(f"LSUMA={LSUMA}")
print(f"LORDENADA={LORDENADA}")
print(f"LUNICA={LUNICA}")

"""3) Menú de funciones: dígitos faltantes, Fibonacci y combinación de strings"""

def digitos_faltantes():
  # leer t con 0 <= t <= 10
  while True:
    t = int(input("Introduce un número entero t (0 <= t <= 10): "))
    if 0 <= t <= 10:
      break
  # Leer t valores validados como dígitos 0-9
  digitos = []
  for i in range(t):
    while True:
      digito = int(input(f"Introduce el dígito {i+1}(0-9): "))
      if 0 <= digito <=9:
        digitos.append(digito)
        break
  # Mostrar los dígitos faltantes de 1 a 9
  faltantes = [str(i) for i in range (1,10) if i not in digitos]
  print(" ".join(faltantes))


def fibonacci():
  # Leer n con n >= 0
  while True:
    n = int(input("Introduce un número entero n (n>=0): "))
    if n >= 0:
      break
  # Generar la lista de fibonacci
  fibo = []
  a, b = 0, 1 #la serie siempre empieza en 0 y 1
  for _ in range(n):
    fibo.append(a)
    a, b = b, a + b
  print(fibo)


def combinar_listas_strings():
  # Leer a y b
  a = int(input("Introduce la cantidad de strings para L1: "))
  b = int(input("Introduce la cantidad de strings para L2: "))

  if a <= 0 or b <= 0:
    print("Error")
    return

  print("-----")
  # Capturar a strings para L1
  L1 = []
  for i in range(a):
    L1.append(input(f"Introduce el string {i+1} para L1: "))
  print("-----")

  # Capturar b strings para L2
  L2 = []
  for i in range(b):
    L2.append(input(f"Introduce el string {i+1} para L2: "))
  print("-----")
  # Combina las dos listas alternando los elementos
  L3 = []
  for i in range(max(a, b)): # Repite según la lista más grande
    if i < a:
      L3.append(L1[i])
    if i < b:
      L3.append(L2[i])

  print(L1)
  print(L2)
  print(L3)


def main():
  while True:
    #Muestra el menú
    print("1) Dígitos faltantes (1-9)")
    print("2) Fibonacci en lista")
    print("3) Combinar listas de strings")
    print("4) Salir")

    opcion = int(input("Elige una opción: "))
#Ejecuta la función elegida
    if opcion == 1:
      digitos_faltantes()
    elif opcion == 2:
      fibonacci()
    elif opcion == 3:
      combinar_listas_strings()
    elif opcion == 4:
      print("Saliendo del programa...")
      break
    else:
      print("Opción no válida, por favor intenta de nuevo.")


if __name__ == "__main__":
  main()